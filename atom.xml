<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码不停提</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.voidata.com/"/>
  <updated>2019-10-28T23:56:00.000Z</updated>
  <id>https://blog.voidata.com/</id>
  
  <author>
    <name>Nickey</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>.NET Core 3.0 新功能快速预览 - 发布指定平台的可执行文件</title>
    <link href="https://blog.voidata.com/2019/09/25/netcore-3.0-newfeature/"/>
    <id>https://blog.voidata.com/2019/09/25/netcore-3.0-newfeature/</id>
    <published>2019-09-24T18:06:50.000Z</published>
    <updated>2019-10-28T23:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>随着 .NET Core 3.0版本的正式发布，一系列新特性终于可以使用在实际工程中了。而 .NET Core 3.0 中的一项非常引入注意的功能，就是将应用打包为特定于平台的可执行文件。<br>在 .NET Core 3.0 以前的版本中，项目选项的生成属性设置为<code>可执行文件</code>，其效果为最终应用会打包为一个<code>app.dll</code>文件。</p><a id="more"></a><p><img src="http://image.voidata.com/2019-09-25-15693369859078.jpg" alt="-w1072"><br>如果需要运行该应用，需要在终端中输入<code>dotnet app.dll</code>以运行该应用。<br>全新的 .NET Core 3.0 打包，在项目选项的生成属性设置为<code>可执行文件</code>时，会根据编译平台，自动生成适应于当前操作系统的<code>真·可执行文件</code>。在我的 Mac 电脑上，通过Visual Studio for Mac 集成 IDE 进行生成操作，默认就可以编译成本地可执行的应用程序。<br><img src="http://image.voidata.com/2019-09-25-15693375449268.jpg" alt="-w388"><br>生成的文件夹结构如下<br><img src="http://image.voidata.com/2019-09-25-15693401721591.jpg" alt="-w632"><br>而生成的应用程序，既可以通过双击运行，也可以直接在终端中启动运行。<br><img src="http://image.voidata.com/2019-09-25-15693376467186.jpg" alt="-w697"><br>通过这种形式运行的应用，更接近于原生应用的启动方式，同时极大的简化了应用的启动便捷性。微软为该类型的可执行文件定义为<a href="https://docs.microsoft.com/zh-cn/dotnet/core/deploying/index#framework-dependent-executables-fde" target="_blank" rel="noopener">依赖框架的可执行文件 (FDE)</a>。<br>需要注意的是，通过这种方式生成的可执行文件，仅针对当前操作系统。例如我当前操作系统为 MacOS，则无法生成 Windwos 或者 Linux 操作系统的可执行文件，此时，可以采用两种方式来运行应用程序：</p><h3 id="使用传统方式"><a href="#使用传统方式" class="headerlink" title="使用传统方式"></a>使用传统方式</h3><p>观察生成文件夹，发现其中仍然包含<code>app.dll</code>文件，因此，我们仍然可以采用在目标操作系统的终端中输入<code>dotnet app.dll</code>的方式来启动应用程序。由此可见，新的打包成可执行文件方式，是在原有基础上针对当前操作系统自动生成了一个应用同名的可执行文件启动器，用该可执行文件可以调用应用的<code>dll</code>文件来实现程序的加载。至于该文件是否是所有应用相同还有待进一步研究。</p><h3 id="使用针对运行时编译方式"><a href="#使用针对运行时编译方式" class="headerlink" title="使用针对运行时编译方式"></a>使用针对运行时编译方式</h3><p>利用命令行进行项目的编译，可以发布针对给定运行时的应用程序。具体方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet build|pubilsh -r|--runtime &lt;RUNTIME_IDENTIFIER&gt;</span><br></pre></td></tr></table></figure><p>其中，<RUNTIME_IDENTIFIER>可选常用参数</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>win-x64</td><td>Windows 64位</td></tr><tr><td>win-x86</td><td>Windows 32位</td></tr><tr><td>win-arm</td><td>Windows 32位ARM版</td></tr><tr><td>win-arm64</td><td>Windows 64位ARM版</td></tr><tr><td>linux-x64</td><td>CentOS, Debian, Fedora, Ubuntu等发行版Linux系统64位</td></tr><tr><td>linux-x86</td><td>CentOS, Debian, Fedora, Ubuntu等发行版Linux系统32位</td></tr><tr><td>linux-musl-x64</td><td>Alpine Linux等轻量发行版Linux系统64位</td></tr><tr><td>linux-musl-x86</td><td>Alpine Linux等轻量发行版Linux系统32位</td></tr><tr><td>linux-arm</td><td>ARM版本Linux如树莓派</td></tr><tr><td>osx-x64</td><td>MacOS 10.12 Sierra 以上版本64位</td></tr></tbody></table><p>生成出的文件夹包含全部运行时dll，看起来相当不美观。<br><img src="http://image.voidata.com/2019-09-25-15693446936929.jpg" alt="-w480"><br>为了避免这种尴尬的情况，微软贴心的为我们提供了命令行参数，可以帮助我们将全部文件打包为单一文件，代价就是巨大的可执行文件体积，因为打包会将所有运行时dll都包含在内。在我新建的应用中，一行代码都没有改动，编译出的可执行文件大小为95兆，额…….具体的命令行如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet build|pubilsh -r|--runtime &lt;RUNTIME_IDENTIFIER&gt; /p:PublishSingleFile=true</span><br></pre></td></tr></table></figure><p>还可以更进一步，将符号文件一同打包进可执行文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet build|pubilsh -r|--runtime &lt;RUNTIME_IDENTIFIER&gt; /p:PublishSingleFile=true /p:IncludeSymbolsInSingleFile=true</span><br></pre></td></tr></table></figure><p>然后可执行文件的体积……就更大了。<br><img src="http://image.voidata.com/2019-09-25-15693476747205.jpg" alt="-w623"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着 .NET Core 3.0版本的正式发布，一系列新特性终于可以使用在实际工程中了。而 .NET Core 3.0 中的一项非常引入注意的功能，就是将应用打包为特定于平台的可执行文件。&lt;br&gt;在 .NET Core 3.0 以前的版本中，项目选项的生成属性设置为&lt;code&gt;可执行文件&lt;/code&gt;，其效果为最终应用会打包为一个&lt;code&gt;app.dll&lt;/code&gt;文件。&lt;/p&gt;
    
    </summary>
    
    <content src="https://blog.voidata.com/http://image.voidata.com/netcore3feature.png" type="image" />
    
    
      <category term="IT技能" scheme="https://blog.voidata.com/categories/IT%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="NetCore" scheme="https://blog.voidata.com/tags/NetCore/"/>
    
  </entry>
  
  <entry>
    <title>刷新你的技能树（二）HTML5与CSS3</title>
    <link href="https://blog.voidata.com/2019/04/03/refresh-your-skill-tree-2/"/>
    <id>https://blog.voidata.com/2019/04/03/refresh-your-skill-tree-2/</id>
    <published>2019-04-03T07:56:19.000Z</published>
    <updated>2019-04-20T13:58:27.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之所以把这两部分放在一起说，是因为这两部分和JavaScript相比来说要相对简单，而且也没有太多需要特殊理解的部分。另外，网上的这两部分教程特别丰富，学习成本相对较低。</p><a id="more"></a><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><p>其实HTML5就是在之前的HTML之上扩充了一系列标签、属性、Canvas绘图能力、设备访问以及多媒体等先进技术，同时配合CSS3，可以实现很多过去难以实现的功能。<br>由于HTML5向下兼容HTML4.0，因此，学习起来相对比较简单。</p><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><p>CSS3是CSS的升级版本，且仍然在不断完善的过程中。与原有CSS技术的最主要区别就在于其模块化的特点，各个标准制定组织可以快速的迭代其负责的模块，从而推动整个技术的不断进步。<br>学习CSS3的主要困难在于难以掌握众多的模块更新进度，但只要随时关注其版本更新情况及浏览器支持现状，问题同样不大。<br>因为CSS3本身并没有什么逻辑性，因此编写CSS是一个很容易出现错误的过程。有鉴于此，目前比较流行的方式为通过预编译方式生成CSS文件。CSS编译器一般采用<code>LESS(Leaner Style Sheets)</code>或者<code>Sass (Syntactically Awesome Style Sheets)</code>编译器进行编写，并通过编译得到最终的CSS文件。两者相差不大，任意选择一种进行学习即可。</p><figure class="highlight less"><figcaption><span>LESS语法示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@width:</span> <span class="number">10px</span>;</span><br><span class="line"><span class="variable">@height:</span> <span class="variable">@width</span> + <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><figcaption><span>LESS编译结果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>Sass语法示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$width: 10px</span><br><span class="line">$height: $widht + 10px</span><br><span class="line"></span><br><span class="line">nav</span><br><span class="line">    width: $width</span><br><span class="line">    height: $height</span><br></pre></td></tr></table></figure><figure class="highlight css"><figcaption><span>Sass编译结果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，其实两者基本上都比较类似，选择哪个，需要根据采用的框架和个人喜好确定。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之所以把这两部分放在一起说，是因为这两部分和JavaScript相比来说要相对简单，而且也没有太多需要特殊理解的部分。另外，网上的这两部分教程特别丰富，学习成本相对较低。&lt;/p&gt;
    
    </summary>
    
    <content src="https://blog.voidata.com/http://image.voidata.com/20190403T161440.png" type="image" />
    
    
      <category term="IT技能" scheme="https://blog.voidata.com/categories/IT%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="HTML5" scheme="https://blog.voidata.com/tags/HTML5/"/>
    
      <category term="CSS3" scheme="https://blog.voidata.com/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>刷新你的技能树（一）JavaScript</title>
    <link href="https://blog.voidata.com/2019/04/01/refresh-your-skill-tree-1/"/>
    <id>https://blog.voidata.com/2019/04/01/refresh-your-skill-tree-1/</id>
    <published>2019-03-31T16:16:20.000Z</published>
    <updated>2019-04-03T08:17:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>前后端分离开发方式的流行，带动了传统软件行业的变革。以前经常被诟病的“程序员审美”，现在也终于因为前端程序的介入而被彻底的扭转了。作为软件开发行业的老兵，这两年也终于放下了自己以前的一切开发习惯，去适应现阶段程序开发的趋势，感慨之余也发现自己欠缺的真的是太多了，现代化软件开发流程、方式、工具的改变，让我一开始的时候觉得真是一头雾水，完全不知所云，硬生生自己琢磨了个把月，才慢慢摸到一些门槛。<br>前几天和朋友聊天的时候，越发觉得传统企业应用行业的开发者们，还有很大一部分和我一样，正在而且在可预见的一段时间内，仍然处于较为原始的手工作坊模式的开发流程中，导致这批人员虽然非常精通对企业业务逻辑的梳理和业务需求的分析，但苦于对新技术的嗅觉不够灵敏，以至于现在处于一种“知其所以然而不知其然”的奇怪状态中，也就是知道企业需要什么，能够大致描绘出业务场景业务流程，但是落实到软件开发中，却不知道应该使用什么技术，采用哪种方式去进行开发。这的确是一种非常尴尬的情况。为了让大家别和我一样花费大量的精力在这方面，我也计划将我这几个月了解到的东西一点点的整理出来，帮助那些和我一样的朋友，去掌握一些近年来比较流行的开发流程和技术趋势。</p><a id="more"></a><h2 id="从哪里开始"><a href="#从哪里开始" class="headerlink" title="从哪里开始"></a>从哪里开始</h2><p>首先，送大家一首歌吧，激励一下斗志，祝愿大家都能够早日刷新自己的技能树！</p>    <div id="aplayer-SCtVwqaN" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="35476048" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="false" data-listmaxheight="340px" data-preload="none" data-theme="#ad7a86"    ></div><p>传统意义上的企业级应用开发，基本上包含C/S、B/S两部分。B/S这一块，一般也都是界面设计人员设计好软件的界面稿，开发人员则根据设计图，自行构建网站的外观，同时还要实现业务逻辑的编写。稍微高级点，采用MVC架构（Model-View-Controller），可以简单地实现部分界面与业务逻辑的分离，但是这些设计模式在现代高速发展的移动互联时代，显得有点效率低下。举例来说，近年来小程序的流行，要求软件开发快速高效的移植到各个客户端及平台下，传统PC网站、安卓应用、iOS应用、以及微信小程序、支付宝小程序、百度小程序等等各种类型的小程序不断推陈出新。要想快速的将开发的产品适配到各种类型终端中，开发人员面临的就不再是以前那种“一次开发，终身升级”的方式了，前后端分离的需求就越来越迫切。同时，C/S程序的开发也进入到了多元化的时代，除了硬件相关的行业以外，一般意义上的C/S程序，完全可以被HTML5和JavaScript取代。在这种形式下，我们需要学习什么知识才能适应这种趋势，是这一段时间我考虑的最多的问题。经过近一个月时间的恶补，我觉得，应该从JavaScript学起。</p><h2 id="JavaScript的版本"><a href="#JavaScript的版本" class="headerlink" title="JavaScript的版本"></a>JavaScript的版本</h2><p>这里的JavaScript概念，已经不是传统意义上的网页JS了。如今的JavaScript已经拥有了前所未有的各种能力。其基本发展历史可以参考<a href="https://wangdoc.com/javascript/basic/history.html" target="_blank" rel="noopener">这里</a>。而我觉得，掌握现代化软件开发架构，最主要的就是要掌握JavaScript的过程。因此，我第一个推荐大家学习的就是JavaScript。<br>从上面的JavaScript发展历史来看，我认为目前要从ES6这个版本进行入手。ES6包含了很多新的方法和概念，吸收了很多其他语言的精髓，无论从成熟度还是适用范围都很广泛，也是现代软件前端开发的标准。对于部分不支持ES6的浏览器和或其他环境，可以用<a href="https://www.babeljs.cn/" target="_blank" rel="noopener">Babel</a>编译器转换为ES5，从而实现向下兼容。</p><h2 id="推荐书目"><a href="#推荐书目" class="headerlink" title="推荐书目"></a>推荐书目</h2><p>不用费心找了，我给大家准备好了最值得读的JavaScript学习书籍。可以在线看，也可以下载到自己的电脑里、手机里，利用任何碎片化的时间观看。<br>不用害怕，其实这些东西，只要稍微掌握就行，起码达到能够阅读代码的水平就可以，因为接下来，你需要的并不是从头开发一套系统，而是利用现有的一些框架去开发系统，而一个系统最核心的部分还是业务逻辑，这也是你最擅长的部分。之所以需要掌握一些基本的JavaScript，是为了和前端人员进行沟通，或者在现有框架的基础上实现一些自己的小功能而已。</p><div class="row">    <embed src="/uploads/Understanding-ECMAScript-6.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="/uploads/ECMAScript-6-Primer-Third-Edition.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;前后端分离开发方式的流行，带动了传统软件行业的变革。以前经常被诟病的“程序员审美”，现在也终于因为前端程序的介入而被彻底的扭转了。作为软件开发行业的老兵，这两年也终于放下了自己以前的一切开发习惯，去适应现阶段程序开发的趋势，感慨之余也发现自己欠缺的真的是太多了，现代化软件开发流程、方式、工具的改变，让我一开始的时候觉得真是一头雾水，完全不知所云，硬生生自己琢磨了个把月，才慢慢摸到一些门槛。&lt;br&gt;前几天和朋友聊天的时候，越发觉得传统企业应用行业的开发者们，还有很大一部分和我一样，正在而且在可预见的一段时间内，仍然处于较为原始的手工作坊模式的开发流程中，导致这批人员虽然非常精通对企业业务逻辑的梳理和业务需求的分析，但苦于对新技术的嗅觉不够灵敏，以至于现在处于一种“知其所以然而不知其然”的奇怪状态中，也就是知道企业需要什么，能够大致描绘出业务场景业务流程，但是落实到软件开发中，却不知道应该使用什么技术，采用哪种方式去进行开发。这的确是一种非常尴尬的情况。为了让大家别和我一样花费大量的精力在这方面，我也计划将我这几个月了解到的东西一点点的整理出来，帮助那些和我一样的朋友，去掌握一些近年来比较流行的开发流程和技术趋势。&lt;/p&gt;
    
    </summary>
    
    <content src="https://blog.voidata.com/http://image.voidata.com/20190403T161241.png" type="image" />
    
    
      <category term="IT技能" scheme="https://blog.voidata.com/categories/IT%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="JavaScript" scheme="https://blog.voidata.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>测试页面</title>
    <link href="https://blog.voidata.com/2019/03/30/test/"/>
    <id>https://blog.voidata.com/2019/03/30/test/</id>
    <published>2019-03-29T17:35:33.000Z</published>
    <updated>2019-10-29T00:23:25.104Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Hexo网站的一系列测试"><a href="#Hexo网站的一系列测试" class="headerlink" title="Hexo网站的一系列测试"></a>Hexo网站的一系列测试</h1><p>这里存放的是对网站的一些实验性测试内容</p><a id="more"></a><h2 id="拼音标注-Ruby-charater-tag-for-Hexo"><a href="#拼音标注-Ruby-charater-tag-for-Hexo" class="headerlink" title="拼音标注 Ruby charater tag for Hexo"></a>拼音标注 <a href="https://github.com/jamespan/hexo-ruby-character" target="_blank" rel="noopener">Ruby charater tag for Hexo</a></h2><p>我觉得你挺<ruby>可爱<rp> (</rp><rt>shǎ bī</rt><rp>) </rp></ruby>的</p><h2 id="提示hint-hexo-tag-hint"><a href="#提示hint-hexo-tag-hint" class="headerlink" title="提示hint hexo-tag-hint"></a>提示hint <a href="https://github.com/etigerstudio/hexo-tag-hint" target="_blank" rel="noopener">hexo-tag-hint</a></h2><p>鼠标移到<span style="border-bottom: 1px dashed #389fff;"><span class="hint--top hint--rounded hint--info" aria-label="哈哈，我是个小提示" ontouchstart>这里</span></span>试试</p><h2 id="终端和编辑器效果-hexo-tag-gdemo"><a href="#终端和编辑器效果-hexo-tag-gdemo" class="headerlink" title="终端和编辑器效果 hexo-tag-gdemo"></a>终端和编辑器效果 <a href="https://github.com/heowc/hexo-tag-gdemo" target="_blank" rel="noopener">hexo-tag-gdemo</a></h2><h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.9.0/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.9.0/dist/gdemo.min.js"></script>            <div id='demo-teriminal' style='height: 250px'></div>            <script>        new GDemo('#demo-teriminal')          .openApp('terminal', {minHeight: '250px', windowTitle: 'bash', promptString: '$'})    .command(`node <span class="token punctuation">.</span><span class="token operator">/</span>demo`, {onCompleteDelay: 500})        .respond(`Hello World!`)        .end();    </script><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.9.0/dist/gdemo.min.css">            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css">            <script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.9.0/dist/gdemo.min.js"></script>            <div id='demo-editor' style='height: 250px'></div>            <script>        new GDemo('#demo-editor')          .openApp('editor', {minHeight: '250px', windowTitle: 'bash'})          .write(`<span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`, {onCompleteDelay: 500})          .end();    </script><h2 id="测试echarts-hexo-tag-echarts3"><a href="#测试echarts-hexo-tag-echarts3" class="headerlink" title="测试echarts hexo-tag-echarts3"></a>测试echarts <a href="https://kchen.cc/2016/11/05/echarts-in-hexo/" target="_blank" rel="noopener">hexo-tag-echarts3</a></h2><div id="echarts256" style="width: 85%;height: 400px;margin: 0 auto"></div><script src="https://cdn.bootcss.com/echarts/3.8.0/echarts.common.min.js"></script><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts256'));        // 指定图表的配置项和数据        var option = {    tooltip : {        trigger: 'axis',        axisPointer : {            // 坐标轴指示器，坐标轴触发有效            type : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'        }    },    legend: {        data:['利润', '支出', '收入']    },    grid: {        left: '3%',        right: '4%',        bottom: '3%',        containLabel: true    },    xAxis : [        {            type : 'value'        }    ],    yAxis : [        {            type : 'category',            axisTick : {show: false},            data : ['周一','周二','周三','周四','周五','周六','周日']        }    ],    series : [        {            name:'利润',            type:'bar',            itemStyle : {                normal: {                    label: {show: true, position: 'inside'}                }            },            data:[200, 170, 240, 244, 200, 220, 210]        },        {            name:'收入',            type:'bar',            stack: '总量',            itemStyle: {                normal: {                    label : {show: true}                }            },            data:[320, 302, 341, 374, 390, 450, 420]        },        {            name:'支出',            type:'bar',            stack: '总量',            itemStyle: {normal: {                label : {show: true, position: 'left'}            }},            data:[-120, -132, -101, -134, -190, -230, -210]        }    ]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script><h2 id="测试影音播放器在Hexo网站中的使用方法"><a href="#测试影音播放器在Hexo网站中的使用方法" class="headerlink" title="测试影音播放器在Hexo网站中的使用方法"></a>测试影音播放器在Hexo网站中的使用方法</h2><p>影音播放应该是一个网站不可缺少的一部分了吧，所以特别开了一篇文章介绍如何在Hexo网站中使用影音播放器。</p><h3 id="音频播放器hexo-tag-aplayer"><a href="#音频播放器hexo-tag-aplayer" class="headerlink" title="音频播放器hexo-tag-aplayer"></a>音频播放器<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="noopener">hexo-tag-aplayer</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure>    <div id="aplayer-XITHXkVC" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="77470" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="false" data-listmaxheight="340px" data-preload="none" data-theme="#ad7a86"    ></div><h3 id="视频播放器hexo-tag-dplayer"><a href="#视频播放器hexo-tag-dplayer" class="headerlink" title="视频播放器hexo-tag-dplayer"></a>视频播放器<a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer</a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-dplayer --save</span><br></pre></td></tr></table></figure><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"http://image.voidata.com/%E3%80%90MV%E3%80%91%E5%9B%9B%E6%9C%88%E6%98%AF%E4%BD%A0%E7%9A%84%E8%B0%8E%E8%A8%80OP%20%E8%8B%A5%E8%83%BD%E7%BB%BD%E6%94%BE%E5%85%89%E8%8A%92%20%E2%88%95%20Goose%20house.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><h3 id="优酷等视频网站视频hexo-tag-owl目前发现移动端支持存在问题，手机上不显示视频"><a href="#优酷等视频网站视频hexo-tag-owl目前发现移动端支持存在问题，手机上不显示视频" class="headerlink" title="优酷等视频网站视频hexo-tag-owl目前发现移动端支持存在问题，手机上不显示视频"></a>优酷等视频网站视频<a href="https://github.com/m80126colin/hexo-tag-owl#hexo-tag-owl" target="_blank" rel="noopener">hexo-tag-owl</a>目前发现移动端支持存在问题，手机上不显示视频</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-owl --save</span><br></pre></td></tr></table></figure><div class="owl-media owl-video owl-youku"><iframe src="http://player.youku.com/embed/XNDExNjYzMzI2NA==" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div><h3 id="NexT主题修改记录"><a href="#NexT主题修改记录" class="headerlink" title="NexT主题修改记录"></a>NexT主题修改记录</h3><h4 id="界面调整"><a href="#界面调整" class="headerlink" title="界面调整"></a>界面调整</h4><p><strong>去除头像和帖子图片的外框</strong><br>修改 NexT 目录下 <code>source/css/_custom/custom.styl</code> 文件<br>增加内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>首页增加帖子头条图</strong><br>修改 NexT 目录下 <code>layout/_macro/post.swig</code><br>查找内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elif post.excerpt %&#125;</span><br><span class="line">  &#123;&#123; post.excerpt &#125;&#125;</span><br></pre></td></tr></table></figure><p>增加内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elif post.excerpt %&#125;</span><br><span class="line">  &lt;!----Nickey----&gt;</span><br><span class="line">  &#123;% <span class="keyword">if</span> post.image %&#125;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"out-img-topic"</span>&gt;</span><br><span class="line">      &lt;img src=&#123;&#123; post.image &#125;&#125; <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-topic"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &#123;% endif %&#125;</span></span><br><span class="line"><span class="regexp">  &lt;!----Nickey----&gt;</span></span><br><span class="line"><span class="regexp">&#123;&#123; post.excerpt &#125;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo网站的一系列测试&quot;&gt;&lt;a href=&quot;#Hexo网站的一系列测试&quot; class=&quot;headerlink&quot; title=&quot;Hexo网站的一系列测试&quot;&gt;&lt;/a&gt;Hexo网站的一系列测试&lt;/h1&gt;&lt;p&gt;这里存放的是对网站的一些实验性测试内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="IT技能" scheme="https://blog.voidata.com/categories/IT%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Hexo" scheme="https://blog.voidata.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>为什么我总这么忙</title>
    <link href="https://blog.voidata.com/2019/03/28/LowEfficiency/"/>
    <id>https://blog.voidata.com/2019/03/28/LowEfficiency/</id>
    <published>2019-03-28T15:23:28.000Z</published>
    <updated>2019-04-02T16:01:52.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="低效率工作与碎片化知识"><a href="#低效率工作与碎片化知识" class="headerlink" title="低效率工作与碎片化知识"></a>低效率工作与碎片化知识</h2><p>&emsp;&emsp;最近一段时间，很少有正常作息时间，常常是一下子忙到天亮，胡乱睡三四个小时，起来又继续工作。虽然觉得自己已经非常努力了，但是还是总觉得自己有学不完的东西做不完的事情，恨不得每天不吃饭不睡觉能过28个小时。今天晚上时间比较充裕，好好的出去吃了个饭，吃饭的时候大致整理了一下自己的思路，发现自己的生活现在是这个样子的：</p><a id="more"></a><ul><li>20:00，下班路上。突然想到一个问题可能的一个解决方案，当时整个人都很激动，恨不得马上回家开电脑演练一下，因此走路的节奏都快了起来。</li><li>20:11，路过一个煎饼摊，随手买了一个煎饼边走边吃，心里还在推演刚刚的结果，没等到家，晚餐已经解决了，又可以把时间节省下来了，心情真是愉快。</li><li>20:23，到家第一件事情就是打开电脑，开始把刚刚在路上想出的方法实现出来。</li><li>21:18，嗯，功能的大框架基本上没什么问题了，但是就是感觉还不那么完美，总觉得自己可以做的更完美一点。</li><li>21:21，上网看看有没有和自己想法类似的案例，参考一下，说不定就找到更好的办法了。</li><li>22:06，哇塞这问题居然还可以这样处理！改写几个小地方，代码看起来果然清爽了不少。</li><li>22:17，OK搞定，这个功能这样就行。得把今天搜索到的东西记下来，顺便扔网站上发个文，毕竟我的解决方法经过修改比网上现有的还能简单一点，下次用的时候可以直接找到。</li><li>22:25，真是崩溃，为什么每次输入日期都要以<code>YYYY/MM/DD HH:mm:ss</code>的格式呢？每次敲的真辛苦。在输入法里面做个快速输入吧，以后会节省不少时间。</li><li>22:56，MarkDown写文真是不错，不用考虑格式、排版这些东西，专心记录，超级爽，就是这个MarkDown软件….记笔记挺好，可是发布的时候还是有点低效率，还得找个替代品交叉使用。</li><li>23:23，这个MarkDown编辑器有点意思啊，专门为静态网站优化过的编辑器，界面也是清爽的很，感觉捡到宝了,开启免打扰模式，专心写文章。</li><li>23:55，文章写完了，发布出去吧。国外网站就这点不好，稍微多点附件，上传就慢了不少，我这次只是加上了一个十几兆的PDF就把上传拖的这么长，那就随便看看吧。</li><li>00:10，哇哦，原来这个MarkDown编辑器是开源的，而且居然是Node.js写的，HTML+CSS+JS现在都可以做本地应用程序了？赶快看看。</li><li>00:25，原来这就是传说中的<code>electron-app</code>啊！GitHub走起，看看有什么好玩的项目。</li><li>00:48，不知不觉看了半个小时，嗯，有不少好的想法在脑子里面涌现出来了，找时间慢慢研究研究。不过话说回来，文章发布完了，突然又想加点内容呢，干脆先在笔记里面写吧，回头整理出来放在网站上。</li><li>01:02，笔记记好了，把项目的后台服务器更新一下吧，顺便发布个新版本，毕竟审核还需要一两天的时间呢。</li><li>01:18，服务器又双叒叕闹幺蛾子了，SSL连接死活连接不上，小程序登录失败，崩溃了，今天不弄好明天耽误一上午啊！干吧。</li><li>01:35，折腾半天，居然又是服务器管理面板出了问题，直接卸载，再不用这种不靠谱的东西了。</li><li>01:52，服务器重新上线，小程序调试出现了个小问题，模拟器里面好用的功能到真机上出现错误，继续找资料吧。话说腾讯的开发文档真是够烂，简直就是魔鬼派来专门折磨程序员的，该说的不说，废话倒是一堆。</li><li>02:44，重新改好了，再发一版程序吧，提交一下GitHub，免得本地环境出问题丢代码。</li><li>03:01，刚刚出的问题还是要记录一下，回头整理一下反馈官方，这种问题也出，实在可耻。</li><li>03:15，刚刚在GitHub看到一个项目好像能用上，Follow一下，不然回头找不到了。</li><li>03:16，哈哈，这项目有点意思，技术路线比较新，顺着去看看技术文档吧。</li><li>04:21，嗯，自己的技能树又要添一样东西刷新了，这技术代表的就是趋势啊，不学一下会落伍的。</li><li>05:07，外面天亮了，再不睡觉明天早上得睡到啥时候啊，不管了，啥都不想，关灯！</li><li>05:07:05，💤<br>……</li></ul><p>&emsp;&emsp;貌似这种情况有一阵子了，成天忙忙活活的，充实，但是很凌乱，琐碎的东西一大堆，感觉这不是个正常的状态，生活、学习、工作混杂在一起，纷纷攘攘，杂乱无章。要记住：</p><blockquote class="blockquote-center"><p>零碎的知识不是真正的知识，零碎的工作不是有效率的工作<br>———沃·兹基硕得😁</p></blockquote><p>&emsp;&emsp;无论是工作，还是知识，都需要保持井井有条。在做事之前先做好计划，按部就班，不能东一下西一下，这样的工作效率无法提高。同理，在零碎的时间进行学习是个好习惯，但是一定要有清晰的学习知识脉络，系统的去学习，避免囫囵吞枣，这样成体系的知识架构才能帮助你完成技能树的建立。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;低效率工作与碎片化知识&quot;&gt;&lt;a href=&quot;#低效率工作与碎片化知识&quot; class=&quot;headerlink&quot; title=&quot;低效率工作与碎片化知识&quot;&gt;&lt;/a&gt;低效率工作与碎片化知识&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近一段时间，很少有正常作息时间，常常是一下子忙到天亮，胡乱睡三四个小时，起来又继续工作。虽然觉得自己已经非常努力了，但是还是总觉得自己有学不完的东西做不完的事情，恨不得每天不吃饭不睡觉能过28个小时。今天晚上时间比较充裕，好好的出去吃了个饭，吃饭的时候大致整理了一下自己的思路，发现自己的生活现在是这个样子的：&lt;/p&gt;
    
    </summary>
    
    <content src="https://blog.voidata.com/http://image.voidata.com/20190403T000116.png" type="image" />
    
    
      <category term="生活杂谈" scheme="https://blog.voidata.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="效率" scheme="https://blog.voidata.com/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="时间管理" scheme="https://blog.voidata.com/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
      <category term="感悟" scheme="https://blog.voidata.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>利用 GitHub Pages 搭建静态博客（2.准备工作）</title>
    <link href="https://blog.voidata.com/2019/03/28/staticwebsite-2/"/>
    <id>https://blog.voidata.com/2019/03/28/staticwebsite-2/</id>
    <published>2019-03-28T04:54:33.000Z</published>
    <updated>2019-04-02T19:58:15.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Hexo博客框架的搭建"><a href="#Hexo博客框架的搭建" class="headerlink" title="Hexo博客框架的搭建"></a>Hexo博客框架的搭建</h2><p>经过上一篇的介绍，大家应该对静态网站有了一定认识。话不多说，我们现在就开始自己动手准备自己的网站搭建吧。</p><a id="more"></a><p>和传统网站最大的区别，就是需要事先在本地生成好网站内容。虽然一些网站支持在线编译生成，如<a href="https://gitee.com/help/articles/4136" target="_blank" rel="noopener">码云的Pages服务</a>、<a href="https://dev.tencent.com/help/doc/quick-start/creating-pages" target="_blank" rel="noopener">原Coding.net，现在的腾讯云开发者平台Pages服务</a>，但还是建议在本地编译完成后将静态网站上传到Pages服务中。一方面这些服务稳定性不是很好，另外一方面，生成过程不可控因素较多，且更新速度较慢。<br>目前比较热门的静态网站系统有<a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a>、<a href="http://octopress.org/" target="_blank" rel="noopener">Octopress</a>以及本次我采用的<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>系统。<br>Hexo采用Node.js编写。它最主要的优势就在于编译迅速，并且支持全部的MarkDown语法。仅仅这两点，就已经足够吸引我去使用它了。<br>架构Hexo系统相对来说比较简单，主要分为以下几步：</p><h3 id="1-Node-js的安装"><a href="#1-Node-js的安装" class="headerlink" title="1.Node.js的安装"></a>1.Node.js的安装</h3><p>Hexo系统架构于Node.js之上，所以我们的本机环境必不可少的就是<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a>了。想要安装Node.js非常简单，无论在Windows环境还是在Mac环境，Node.js均提供了安装包，只要按照安装向导一步步进行就可以轻松的将Node.js安装好。<br><img src="http://image.voidata.com/Xnip2019-03-29_03-00-16.png" alt="Node.js安装"></p><h3 id="2-Git的安装"><a href="#2-Git的安装" class="headerlink" title="2.Git的安装"></a>2.Git的安装</h3><p>绝大部分的Hexo插件、模板（包括Hexo本身）都提供GitHub下载，因此<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>也是必须要安装的一个软件。同Node.js一样，Git同样提供了安装包下载，依照向导提示即可安装好Git。<br><img src="http://image.voidata.com/Xnip2019-03-29_03-08-01.png" alt="Git安装"></p><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><p>前两步的安装基本上所有人都可以理解，Hexo的安装如果之前没有接触过命令行的人可能就比较陌生了。Hexo安装程序是通过<code>npm</code>的包形式提供的，因此，无论Windows用户还是Mac用户，都需要打开命令行，输入以下指令进行安装。看下面动图就知道，这个过程其实也很简单，傻瓜化操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="http://image.voidata.com/Hexo%E5%AE%89%E8%A3%85.gif" alt="Hexo安装"></p><hr><p>好了，基本的环境已经安装好了，下一步，我们就要正式的开始建立我们的Hexo静态博客了。我们下次见！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo博客框架的搭建&quot;&gt;&lt;a href=&quot;#Hexo博客框架的搭建&quot; class=&quot;headerlink&quot; title=&quot;Hexo博客框架的搭建&quot;&gt;&lt;/a&gt;Hexo博客框架的搭建&lt;/h2&gt;&lt;p&gt;经过上一篇的介绍，大家应该对静态网站有了一定认识。话不多说，我们现在就开始自己动手准备自己的网站搭建吧。&lt;/p&gt;
    
    </summary>
    
    <content src="https://blog.voidata.com/http://image.voidata.com/20190403T035432.png" type="image" />
    
    
      <category term="IT技能" scheme="https://blog.voidata.com/categories/IT%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="GitHub" scheme="https://blog.voidata.com/tags/GitHub/"/>
    
      <category term="MarkDown" scheme="https://blog.voidata.com/tags/MarkDown/"/>
    
      <category term="Hexo" scheme="https://blog.voidata.com/tags/Hexo/"/>
    
      <category term="MWeb" scheme="https://blog.voidata.com/tags/MWeb/"/>
    
  </entry>
  
  <entry>
    <title>利用 GitHub Pages 搭建静态博客（1.简介）</title>
    <link href="https://blog.voidata.com/2019/03/28/staticwebsite-1/"/>
    <id>https://blog.voidata.com/2019/03/28/staticwebsite-1/</id>
    <published>2019-03-28T04:13:18.000Z</published>
    <updated>2019-04-02T19:57:53.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="静态博客简介"><a href="#静态博客简介" class="headerlink" title="静态博客简介"></a>静态博客简介</h2><p>Blog这种在很多年前流行的东西，现在已经逐渐被微博、公众号之类服务所取代，但其功能性却是微博和公众号所无法取代的。随着前端技术以及MarkDown的迅速崛起，传统的动态博客大有被静态博客取代的趋势。</p><a id="more"></a><p>总结下来，静态博客有下面几个优点：</p><ol><li>速度快。这也是其最被看重的优势之一。传统的博客系统如Wordpress，体积臃肿，页面每次都需要动态生成，导致速度被大大拖累。虽然也有相应的缓存技术及静态化支持，但仍不及静态网页的轻巧灵动。</li><li>无需专门环境支持。因为静态博客全部页面都已经事先生成，只要有很简单的网页空间就可以运行，这比起动态博客动不动就要虚拟主机以支持其运行比起来，起点简直不要再低了。再加上很多知名大厂都提供免费静态化空间，让搭建静态博客成本基本上降到0.</li><li>发布方式多样化。配合MarkDown在本地写博客，简直是一种享受。写完以后一键发布到网上，更是有种尽在掌握的感觉。这对于很多人来说真的是很重要的。</li></ol><p>总之，和传统网站相比，静态网站的优势在于轻便、灵活、高效、快速，适合绝大部分人使用。<br>但是，静态网站虽然好，初始设置可不是一个很简单的工作。我也是在经历了好几次折腾才最终搞定。为了避免大家和我一样折腾，我决定将整个过程给大家分享一下，下述情况在文章发布时均为可用状态，不保证随着服务提供方变更服务时仍然有效。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;静态博客简介&quot;&gt;&lt;a href=&quot;#静态博客简介&quot; class=&quot;headerlink&quot; title=&quot;静态博客简介&quot;&gt;&lt;/a&gt;静态博客简介&lt;/h2&gt;&lt;p&gt;Blog这种在很多年前流行的东西，现在已经逐渐被微博、公众号之类服务所取代，但其功能性却是微博和公众号所无法取代的。随着前端技术以及MarkDown的迅速崛起，传统的动态博客大有被静态博客取代的趋势。&lt;/p&gt;
    
    </summary>
    
    <content src="https://blog.voidata.com/http://image.voidata.com/20190403T035222.png" type="image" />
    
    
      <category term="IT技能" scheme="https://blog.voidata.com/categories/IT%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="GitHub" scheme="https://blog.voidata.com/tags/GitHub/"/>
    
      <category term="MarkDown" scheme="https://blog.voidata.com/tags/MarkDown/"/>
    
      <category term="Hexo" scheme="https://blog.voidata.com/tags/Hexo/"/>
    
      <category term="MWeb" scheme="https://blog.voidata.com/tags/MWeb/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7下ShadowSocks与锐速的搭建</title>
    <link href="https://blog.voidata.com/2019/03/15/speedup/"/>
    <id>https://blog.voidata.com/2019/03/15/speedup/</id>
    <published>2019-03-15T13:41:25.000Z</published>
    <updated>2019-04-02T14:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="ShadowSocks与锐速"><a href="#ShadowSocks与锐速" class="headerlink" title="ShadowSocks与锐速"></a>ShadowSocks与锐速</h2><p>都说搬瓦工的CN2线路牛叉的很，速度飞快，可是我用作代理服务器的时候，始终没觉得有多牛，访问Google、YouTube之类的网站还好，稍微不著名点的网站就龟速了。趁着因为.NET Core服务出现SSL访问问题需要重新部署的机会，顺便测试了一下锐速这个宝贝，发现果然名不虚传，YouTube看5K分辨率视频缓存时间可以忽略不计！具体安装方法如下：</p><a id="more"></a><h3 id="0-安装之前"><a href="#0-安装之前" class="headerlink" title="0.安装之前"></a>0.安装之前</h3><p>安装锐速属于内核级别操作，如果服务器上存在重要信息或一些相关配置，可以使用主机商提供的服务对现有系统制作Snapshot，避免因为操作失误导致的损失。对于搬瓦工网站，主机商提供了快照功能，可以在安装前制作快照<br><img src="http://image.voidata.com/15524194414837.jpg" alt="快照功能位置-w257"><br>在KiwiVM控制面板中选择Snapshots进入快照制作。<br><img src="http://image.voidata.com/15524195442938.jpg" alt="创建快照按钮-w217"><br>右侧会出现按钮<code>Create new snapshot</code>，选择后提示输入快照的描述<br><img src="http://image.voidata.com/15524196078439.jpg" alt="输入快照描述-w690"><br>输入后再次点击’Create new snapshot’，系统将自动进行快照的制作。在制作期间，主机会出现短暂关机，因此此操作尽量在访问量较少的时候进行。<br>制作好的快照默认保留30天，30天后将自动删除，可以选择将快照“Sticky”，经过“Sticky”的快照将永久保存，但每主机只允许保留两个“Sticky”状态的快照。建议将最新最重要的快照进行“Sticky”操作，其他快照下载备份<br><img src="http://image.voidata.com/15524198719078.jpg" alt="快照“Sticky”操作-w625"></p><h3 id="1-安装支持环境"><a href="#1-安装支持环境" class="headerlink" title="1.安装支持环境"></a>1.安装支持环境</h3><p>锐速安装需要一些相关软件，对于CentOS系统，通过<code>yum</code>命令行可以非常方便的进行安装。建议同时更新一下整个系统，确保目前系统中各种软件包均为最新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum update -y</span><br><span class="line">yum install bind-utils net-tools wget ntp -y</span><br></pre></td></tr></table></figure><p>顺便同步一下服务器时间，避免因为服务器时间不同步导致的各种问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line">timedatectl set-ntp yes</span><br><span class="line">timedatectl</span><br></pre></td></tr></table></figure><p>重启一下系统，准备开始安装锐速</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl reboot</span><br></pre></td></tr></table></figure><h3 id="2-强制安装支持锐速的最新内核"><a href="#2-强制安装支持锐速的最新内核" class="headerlink" title="2.强制安装支持锐速的最新内核"></a>2.强制安装支持锐速的最新内核</h3><p>锐速破解版不是所有的内核都支持，目前支持到的最高内核为<code>CentOS Linux (3.10.0-327.36.3.el7.x86_64) 7 (Core)</code>，且仅支持KVM、XEN和VMWare的主机，对于OpenVM的主机不支持，因为OpenVM的主机无法更换内核。一般情况下，主机提供商会告诉你购买的主机是什么类型，但如果没提示或者提示了你给忘了，可以用下面的方法检测：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/code/master/vm_check.sh &amp;&amp; bash vm_check.sh</span><br></pre></td></tr></table></figure><p>该命令执行后，会明确显示主机类型。<br><img src="http://image.voidata.com/15524208402334.jpg" alt="主机类型-w206"><br>还好，我的主机是KVM的，这我就放心了。<br>接下来。需要更换锐速支持的系统内核。完整的支持列表可以参考<a href="https://github.com/0oVicero0/serverSpeeder_kernel/blob/master/serverSpeeder.txt" target="_blank" rel="noopener">这里</a>。因为我的服务器安装的是CentOS 7.6，查找了一下，最新的支持只支持到7.3，所以只能用7.2的支持内核了。目前的内核版本为<code>kernel-3.10.0-327.36.3.el7.x86_64</code>，就这个了。因为此版本内核比现在使用的内核版本号低，所以需要强制更换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://vault.centos.org/7.2.1511/updates/x86_64/Packages/kernel-3.10.0-327.36.3.el7.x86_64.rpm --force</span><br></pre></td></tr></table></figure><p>更换内核需要一些时间，稍微等待一下，等操作结束后，就设置永久使用该内核启动吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub2-set-default &quot;CentOS Linux (3.10.0-327.36.3.el7.x86_64) 7 (Core)&quot;</span><br></pre></td></tr></table></figure><p>这次倒是挺快，看看切换成功了没</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub2-editenv list</span><br></pre></td></tr></table></figure><p><img src="http://image.voidata.com/15524227705510.jpg" alt="内核名称-w416"><br>好的，可以了，再次重新启动（代码同上）。重启完成后再次确认启动内核是否正确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p><img src="http://image.voidata.com/15524228620280.jpg" alt="内核版本号-w179"><br>OK，搞定内核！</p><h3 id="3-安装锐速"><a href="#3-安装锐速" class="headerlink" title="3.安装锐速"></a>3.安装锐速</h3><p>反而这步是最简单的，一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://github.com/91yun/serverspeeder/raw/master/serverspeeder-v.sh &amp;&amp; bash serverspeeder-v.sh CentOS 7.2 3.10.0-327.el7.x86_64 x64 3.11.20.5 serverspeeder_72327</span><br></pre></td></tr></table></figure><p>锐速是默认自动启动的，不需要人为干预，所以到这里安装就完成了。</p><h3 id="4-安装Shadowsocks"><a href="#4-安装Shadowsocks" class="headerlink" title="4.安装Shadowsocks"></a>4.安装Shadowsocks</h3><p>在控制台执行以下命令安装<code>pip</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;</span><br><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure><p>然后利用<code>pip</code>安装Shadowsocks软件包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><p>接下来配置一下Shadowsocks的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>输入以下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">  <span class="attr">"server_port"</span>: <span class="number">8080</span>,</span><br><span class="line">  <span class="attr">"password"</span>: <span class="string">"你的密码"</span>,</span><br><span class="line">  <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，Shadowsocks也装好了。不过每次开机都需要手动执行还是不爽，那就让它开机自动执行吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/shadowsocks.service</span><br></pre></td></tr></table></figure><p>输入下面内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>将它添加到系统守护中自动运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable shadowsocks</span><br></pre></td></tr></table></figure><p>然后启动它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start shadowsocks</span><br></pre></td></tr></table></figure><p>好了，这次真的完成了！额，还是看看执行状态吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status shadowsocks -l</span><br></pre></td></tr></table></figure><p><img src="http://image.voidata.com/15524235309417.jpg" alt="执行状态-w988"><br>看到加粗的显示<code>active (running)</code>了吗？真的执行了耶✌️<br>这次是真的放心了，一切都搞定的感觉真好。<br>不对，还没测试速度呢。配置好Shadowsocks客户端，访问下面的网站<br><a href="https://fast.com/" target="_blank" rel="noopener">https://fast.com/</a><br>看看速度如何<br><img src="http://image.voidata.com/15524241865066.jpg" alt="测试速度-w1552"><br>还行吧，反正看个YouTube的5K视频无压力，完美🤘</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ShadowSocks与锐速&quot;&gt;&lt;a href=&quot;#ShadowSocks与锐速&quot; class=&quot;headerlink&quot; title=&quot;ShadowSocks与锐速&quot;&gt;&lt;/a&gt;ShadowSocks与锐速&lt;/h2&gt;&lt;p&gt;都说搬瓦工的CN2线路牛叉的很，速度飞快，可是我用作代理服务器的时候，始终没觉得有多牛，访问Google、YouTube之类的网站还好，稍微不著名点的网站就龟速了。趁着因为.NET Core服务出现SSL访问问题需要重新部署的机会，顺便测试了一下锐速这个宝贝，发现果然名不虚传，YouTube看5K分辨率视频缓存时间可以忽略不计！具体安装方法如下：&lt;/p&gt;
    
    </summary>
    
    <content src="https://blog.voidata.com/http://image.voidata.com/20190402T224259.png" type="image" />
    
    
      <category term="IT技能" scheme="https://blog.voidata.com/categories/IT%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="CentOS" scheme="https://blog.voidata.com/tags/CentOS/"/>
    
      <category term="Linux" scheme="https://blog.voidata.com/tags/Linux/"/>
    
      <category term="服务器部署" scheme="https://blog.voidata.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
</feed>
